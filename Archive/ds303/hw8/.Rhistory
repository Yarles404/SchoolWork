load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(echo = TRUE)
load_mnist()
get_wd()
getwd()
setwd(C:/Users/15155/Desktop/ds303/mnist)
setwd("C:/Users/15155/Desktop/ds303/mnist")
getwd()
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(echo = TRUE)
load_mnist()
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
load_mnist()
load_mnist()
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
load_mnist()
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
load_mnist()
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
load_mnist()
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
getwd
getwd()
setwd("C:/Users/15155/Desktop/ds303/hw8/mnist")
setwd("C:/Users/15155/Desktop/ds303/hw8/mnist")
source('C:/Users/15155/Desktop/ds303/mnist/mnist_load_script.R', echo=TRUE)
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
load_mnist()
load_mnist()
getwd()
setwd("C:/Users/15155/Desktop/ds303/hw8")
load_mnist()
source('C:/Users/15155/Desktop/ds303/hw8/mnist_load_script.R', echo=TRUE)
load_mnist()
setwd("C:/Users/15155/Desktop/ds303/hw8/mnist")
getwd()
load_mnist()
load_mnist()
setwd("C:/Users/15155/Desktop/ds303/hw8")
load_mnist()
View(test)
View(train)
load_mnist()
numberTrainIndex = sample(1:train$n, 3000)
numberTestIndex = sample(1:test$n, 100)
numberTrain = train[numberTrainIndex, ]
View(train)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
capture.output(load_mnist(), file='NUL')
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
capture.output(load_mnist(), file='NUL')
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
capture.output(load_mnist(), file='NUL')
load_mnist()
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
load_mnist()
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
load_mnist()
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
load_mnist()
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
load_mnist()
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
load_mnist()
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
load_mnist()
load_mnist()
getwd()
setwd("C:/Users/15155/Desktop/ds303/hw8/mnist")
load_mnist()
getwd()
load_mnist()
numberTrainIndex = sample(1:train$n, 3000)
train
?train
environmentIsLocked()
x <- environment(); while(TRUE) { print(exists("train", x)); x <- parent.env(x) }
train <- NULL
test <- NULL
load_mnist()
View(x)
View(x)
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
train <- NULL
test <- NULL
load_mnist()
numberTrainIndex = sample(1:train$n, 3000)
numberTestIndex = sample(1:test$n, 100)
numberTrainX = train$x[numberTrainIndex, ]
numberTrainY = train$y[numberTrainIndex, ]
View(train)
View(test)
View(numberTrainX)
View(numberTrainX)
numberTrainIndex = sample(1:train$n, 3000)
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
train <- NULL
test <- NULL
load_mnist()
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
numberTrainIndex = sample(1:train$n, 3000)
numberTrainIndex = sample(1:train$n, 3000)
numberTestIndex = sample(1:test$n, 100)
numberTrainX = train$x[numberTrainIndex, ]
numberTrainY = train$y[numberTrainIndex]
numberTestX = test$x[numberTestIndex, ]
numberTestY = test$y[numberTestIndex]
View(numberTestX)
K = c(1, 5, 7, 9)
standardizedX = scale(numberTrainX)
flds <- createFolds(numberTrainY, k = 10, list = TRUE, returnTrain = FALSE)
cvMisclassification = matrix(NA, 4, 10)
for(j in 1:4){
k = K[j]
for(i in 1:10){
test_index = flds[[i]]
testX = as.matrix(standardizedX[test_index])
trainX = as.matrix(standardizedX[-test_index])
testY = numberTrainY[test_index]
trainY = numberTrainY[-test_index]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
K = c(1, 5, 7, 9)
standardizedX = scale(numberTrainX)
flds <- createFolds(numberTrainY, k = 10, list = TRUE, returnTrain = FALSE)
cvMisclassification = matrix(NA, 4, 10)
for(j in 1:4){
k = K[j]
for(i in 1:10){
test_index = flds[[i]]
testX = as.matrix(standardizedX[test_index, ])
trainX = as.matrix(standardizedX[-test_index, ])
testY = numberTrainY[test_index]
trainY = numberTrainY[-test_index]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
K = c(1, 5, 7, 9)
standardizedX = scale(numberTrainX)
flds <- createFolds(numberTrainY, k = 10, list = TRUE, returnTrain = FALSE)
cvMisclassification = matrix(NA, 4, 10)
for(j in 1:4){
k = K[j]
for(i in 1:10){
test_index = flds[[i]]
testX = standardizedX[test_index, ]
trainX = standardizedX[-test_index, ]
testY = numberTrainY[test_index]
trainY = numberTrainY[-test_index]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
is.na
is.na(textX)
is.na(testX)
testX
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
train <- NULL
test <- NULL
load_mnist()
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
numberTrainIndex = sample(1:train$n, 3000)
numberTestIndex = sample(1:test$n, 100)
numberTrainX = train$x[numberTrainIndex, ]
numberTrainY = train$y[numberTrainIndex]
numberTestX = test$x[numberTestIndex, ]
numberTestY = test$y[numberTestIndex]
K = c(1, 5, 7, 9)
flds <- createFolds(numberTrainY, k = 10, list = TRUE, returnTrain = FALSE)
cvMisclassification = matrix(NA, 4, 10)
for(j in 1:4){
k = K[j]
for(i in 1:10){
test_index = flds[[i]]
testX = numberTrainX[test_index, ]
trainX = numberTrainX[-test_index, ]
testY = numberTrainY[test_index]
trainY = numberTrainY[-test_index]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
K = c(1, 5, 7, 9)
flds <- createFolds(numberTrainY, k = 10, list = TRUE, returnTrain = FALSE)
cvMisclassification = matrix(NA, 10, 4)
for(j in 1:4){
k = K[j]
for(i in 1:10){
test_index = flds[[i]]
testX = numberTrainX[test_index, ]
trainX = numberTrainX[-test_index, ]
testY = numberTrainY[test_index]
trainY = numberTrainY[-test_index]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
apply(cvMisclassification,2,mean)
train.X = numberTrainX
train.Y = numberTrainY
knn.pred = knn(train.X, scale(numberTestX), train.Y, k=9)
numberTrainIndex = sample(1:train$n, 3000)
numberTestIndex = sample(1:test$n, 100)
numberTrainX = train$x[numberTrainIndex, ]
numberTrainY = train$y[numberTrainIndex]
numberTestX = test$x[numberTestIndex, ]
numberTestY = test$y[numberTestIndex]
K = c(1, 5, 7, 9)
flds <- createFolds(numberTrainY, k = 10, list = TRUE, returnTrain = FALSE)
cvMisclassification = matrix(NA, 10, 4)
for(j in 1:4){
k = K[j]
for(i in 1:10){
test_index = flds[[i]]
testX = numberTrainX[test_index, ]
trainX = numberTrainX[-test_index, ]
testY = numberTrainY[test_index]
trainY = numberTrainY[-test_index]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
bestK = which.min(apply(cvMisclassification,2,mean))
train.X = numberTrainX
train.Y = numberTrainY
test.X = numberTestX
knn.pred = knn(train.X, test.X, train.Y, k=K[bestK])
print("KNN")
table(knn.pred, numberTestY)
mean(numberTestY == knn.pred)
bestK = which.min(apply(cvMisclassification,2,mean))
train.X = numberTrainX
train.Y = numberTrainY
test.X = numberTestX
knn.pred = knn(train.X, test.X, train.Y, k=K[bestK])
print(paste0("Best K: ", K[bestK]))
table(knn.pred, numberTestY)
mean(numberTestY == knn.pred)
bestK = which.min(apply(cvMisclassification,2,mean))
train.X = numberTrainX
train.Y = numberTrainY
test.X = numberTestX
knn.pred = knn(train.X, test.X, train.Y, k=K[bestK])
print(paste0("Best K: ", K[bestK]))
table(knn.pred, numberTestY)
mean(numberTestY == knn.pred)
mean(numberTestY != knn.pred)
lda.fit = lda(numberTrainY~., data=numberTrainX)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(message=FALSE)
library(tidyverse)
library(leaps)
library(e1071)
library(klaR)
library(caret)
library(reshape2)
library(class)
library(MASS)
options(warn=-1)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
library(MASS)
lda.fit = lda(numberTrainY~., data=numberTrainX)
numberTrainDF <- cbind(numberTrainX, numberTrainY)
lda.fit = lda(numberTrainY~., data=numberTrainX)
View(numberTrainDF)
numberTrainDF <- cbind(numberTrainX, numberTrainY)
lda.fit = lda(numberTrainY~., data=numberTrainDF)
numberTrainDF <- data.frame(cbind(numberTrainX, numberTrainY))
lda.fit = lda(numberTrainY~., data=numberTrainDF)
glm(numberTrainY~., data=numberTrainDF, family='binomial')
glm(numberTrainY~., data=numberTrainDF, family='multinomial')
glm(numberTrainY~., data=numberTrainDF, family='multinomial')
glmnet(numberTrainY~., data=numberTrainDF, family='multinomial')
multinom(numberTrainY ~ ., data = numberTrainDF)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
library(MASS)
library(foreign)
library(nnet)
multinom(numberTrainY ~ ., data = numberTrainDF)
</div>
</div>
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(caret)
library(class)
library(glmnet)
library(MASS)
library(foreign)
library(nnet)
train <- NULL
test <- NULL
load_mnist()
source('C:/Users/15155/Desktop/ds303/hw8/mnist/mnist_load_script.R', echo=TRUE)
train <- NULL
test <- NULL
load_mnist()
numberTrainIndex = sample(1:train$n, 3000)
numberTestIndex = sample(1:test$n, 100)
numberTrainX = train$x[numberTrainIndex, ]
numberTrainY = train$y[numberTrainIndex]
numberTestX = test$x[numberTestIndex, ]
numberTestY = test$y[numberTestIndex]
K = c(1, 5, 7, 9)
flds <- createFolds(numberTrainY, k = 10, list = TRUE, returnTrain = FALSE)
cvMisclassification = matrix(NA, 10, 4)
for(j in 1:4){
k = K[j]
for(i in 1:10){
test_index = flds[[i]]
testX = numberTrainX[test_index, ]
trainX = numberTrainX[-test_index, ]
testY = numberTrainY[test_index]
trainY = numberTrainY[-test_index]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
bestK = which.min(apply(cvMisclassification,2,mean))
train.X = numberTrainX
train.Y = numberTrainY
test.X = numberTestX
knn.pred = knn(train.X, test.X, train.Y, k=K[bestK])
print(paste0("Best K: ", K[bestK]))
table(knn.pred, numberTestY)
mean(numberTestY == knn.pred)
mean(numberTestY != knn.pred)
show_digit(train[1, ])
show_digit(train$x[1, ])
show_digit(train$x[2, ])
show_digit(train$x[3, ])
show_digit(train$x[4, ])
show_digit(train$x[5, ])
getwd()
