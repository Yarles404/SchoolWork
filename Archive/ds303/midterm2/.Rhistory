knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(message=FALSE)
options(warn=-1)
library(tidyverse)
library(leaps)
library(e1071)
library(klaR)
library(caret)
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
logit.fit = glm(Y~., data=heart, family='binomial')
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
```chd
logit.fit = glm(chd~., data=heart, family='binomial')
x = data.frame(x=50)
logit50Prob = predict(logit.fit, x, type='response')
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
logit.fit = glm(chd~., data=heart, family='binomial')
x = data.frame(age=50)
logit50Prob = predict(logit.fit, x, type='response')
logit.fit = glm(chd~age, data=heart, family='binomial')
x = data.frame(age=50)
logit50Prob = predict(logit.fit, x, type='response')
logit50Prob
n = nrow(heart)
B = 2000
logit50Probs = rep(0,2000)
for(b in 1:B){
index = sample(1:n,n,replace=TRUE)
bootsample = heart[index,]
fit = glm(chd~age, data=bootsample, family='binomial')
logit50Probs[b] = predict(fit, x, type='response')
}
bootmean = mean(logit50Probs)
sqrt(sum((logit50Probs-bootmean)^2)/(B-1))
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
n = nrow(heart)
testIndex = sample(1:nrow(heart), n/5, replace = FALSE)
train = heart[-testIndex,]
test = heart[testIndex,]
logit.fit = glm(chd~age, data=heart, family='binomial')
x = data.frame(age=50)
logit50Prob = predict(logit.fit, x, type='response')
logit50Prob
B = 2000
logit50Probs = rep(0,B)
for(b in 1:B){
index = sample(1:n,n,replace=TRUE)
bootsample = heart[index,]
fit = glm(chd~age, data=bootsample, family='binomial')
logit50Probs[b] = predict(fit, x, type='response')
}
bootmean = mean(logit50Probs)
sqrt(sum((logit50Probs-bootmean)^2)/(B-1))
B = 2000
logit50Probs = rep(0,B)
for(b in 1:B){
bootindex = sample(1:n,n,replace=TRUE)
bootsample = heart[bootindex,]
fit = glm(chd~age, data=bootsample, family='binomial')
logit50Probs[b] = predict(fit, x, type='response')
}
bootmean = mean(logit50Probs)
sqrt(sum((logit50Probs-bootmean)^2)/(B-1))
K = c(1, 3, 5, 7, 9)
standardizedX = scale(trainWeekly[, -9]$Lag2)
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[, -9])
?heart
names(heart)
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-10])
test = heart[1:100,] %>% select(-famhist)
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
n = nrow(heart)
test = heart[1:100,] %>% select(-famhist)
names(heart)
test = heart[1:100,-5]
train = heart[-1:100,-5]
test = heart[1:100,-5]
train = heart[-(1:100),-5]
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-10])
cvMisclassification = matrix(NA, 5, 5)
for(j in 1:5){
k = K[j]
for(i in 1:n){
loo = (i)
testX = as.matrix(standardizedX[loo])
trainX = as.matrix(standardizedX[-loo])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(message=FALSE)
options(warn=-1)
library(tidyverse)
library(leaps)
library(e1071)
library(klaR)
library(caret)
library(class)
test = heart[1:100,-5]
train = heart[-(1:100),-5]
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-10])
cvMisclassification = matrix(NA, 5, 5)
for(j in 1:5){
k = K[j]
for(i in 1:n){
loo = (i)
testX = as.matrix(standardizedX[loo])
trainX = as.matrix(standardizedX[-loo])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
test = heart[1:100,-5]
train = heart[-(1:100),-5]
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-10])
cvMisclassification = matrix(NA, 5, 5)
for(j in 1:5){
k = K[j]
for(i in 1:n){
loo = (i)
testX = as.matrix(standardizedX[loo,])
trainX = as.matrix(standardizedX[-loo,])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(message=FALSE)
options(warn=-1)
library(tidyverse)
library(leaps)
library(e1071)
library(klaR)
library(caret)
library(class)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results="hide")
knitr::opts_chunk$set(message=FALSE)
options(warn=-1)
library(tidyverse)
library(leaps)
library(e1071)
library(klaR)
library(caret)
library(class)
test = heart[1:100,-5]
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
n = nrow(heart)
test = heart[1:100,-5]
train = heart[-(1:100),-5]
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-10])
cvMisclassification = matrix(NA, 5, 5)
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = (i)
testX = as.matrix(standardizedX[loo,])
trainX = as.matrix(standardizedX[-loo,])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
View(standardizedX)
test = heart[1:100,-5]
train = heart[-(1:100),-5]
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,names(train) == 'chd'])
cvMisclassification = matrix(NA, 5, 5)
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = (i)
testX = as.matrix(standardizedX[loo,])
trainX = as.matrix(standardizedX[-loo,])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
n = nrow(heart)
test = heart[1:100,-5]
train = heart[-(1:100),-5]
View(test)
standardizedX = scale(train[,names(train) == 'chd'])
View(standardizedX)
standardizedX = scale(train[,names(train) != 'chd'])
View(standardizedX)
standardizedX = scale(train[,-9])
View(standardizedX)
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, 5)
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = (i)
testX = as.matrix(standardizedX[loo,])
trainX = as.matrix(standardizedX[-loo,])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = (i)
testX = as.matrix(standardizedX[loo,])
trainX = as.matrix(standardizedX[-loo,])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
n = nrow(heart)
test = heart[1:100,-5]
train = heart[-(1:100),-5]
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
k = K[j]
k = K[1]
loo = 1
testX = as.matrix(standardizedX[loo,])
View(testX)
trainX = as.matrix(standardizedX[-loo,])
View(testX)
testX = standardizedX[loo,]
testX = standardizedX[loo,]
testX = data.frame(standardizedX[loo,])
View(testX)
testX = as.matrix(standardizedX[loo,])
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = (i)
testX = standardizedX[loo,]
trainX = as.matrix(standardizedX[-loo,])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
View(trainX)
testX
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = (i)
testX = rbind(data.frame(), standardizedX[loo,])
trainX = as.matrix(standardizedX[-loo,])
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
heart = read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",sep=",",head=T,row.names=1)
n = nrow(heart)
test = heart[1:100,-5]
train = heart[-(1:100),-5]
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = i
testX = standardizedX[loo,]
trainX = standardizedX[-loo,]
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = mean(testY != knn.pred)
}
}
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(j in 1:5){
k = K[j]
for(i in 1:nrow(train)) {
loo = i
testX = standardizedX[loo,]
trainX = standardizedX[-loo,]
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = testY != knn.pred
}
}
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(i in 1:5){
k = K[i]
for(j in 1:nrow(train)) {
loo = j
testX = standardizedX[loo,]
trainX = standardizedX[-loo,]
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = testY != knn.pred
}
}
apply(cvMisclassification,2,mean)
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(i in 1:5){
k = K[i]
for(j in 1:nrow(train)) {
loo = j
testX = standardizedX[loo,]
trainX = standardizedX[-loo,]
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
cvMisclassification[i,j] = testY != knn.pred
}
}
apply(cvMisclassification,1,mean)
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
cvMisclassification = matrix(NA, 5, nrow(train))
for(i in 1:5){
k = K[i]
for(j in 1:nrow(train)) {
loo = j
testX = standardizedX[loo,]
trainX = standardizedX[-loo,]
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
Misclassifications[i,j] = testY != knn.pred
}
}
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
misclassifications = matrix(NA, 5, nrow(train))
for(i in 1:5){
k = K[i]
for(j in 1:nrow(train)) {
loo = j
testX = standardizedX[loo,]
trainX = standardizedX[-loo,]
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
misclassifications[i,j] = testY != knn.pred
}
}
cvMisclassification = apply(misclassifications,1,mean)
which.min(cvMisclassification)
K = c(1, 3, 5, 7, 9)
standardizedX = scale(train[,-9])
misclassifications = matrix(NA, 5, nrow(train))
for(i in 1:5){
k = K[i]
for(j in 1:nrow(train)) {
loo = j
testX = standardizedX[loo,]
trainX = standardizedX[-loo,]
testY = train$chd[loo]
trainY = train$chd[-loo]
knn.pred = knn(trainX, testX, trainY, k=k)
misclassifications[i,j] = testY != knn.pred
}
}
cvMisclassification = apply(misclassifications,1,mean)
paste0("Best k is ",K[which.min(cvMisclassification)])
train.X = standardizedX
train.Y = train$chd
test.X = scale[test[,-9]]
train.X = standardizedX
train.Y = train$chd
test.X = scale(test[,-9])
knn.pred = knn(train.X, test.X, train.Y, k=9)
table(knn.pred, test$chd)
mean(test$chd == knn.pred)
train.X = standardizedX
train.Y = train$chd
test.X = scale(test[,-9])
knn.pred = knn(train.X, test.X, train.Y, k=9)
tab = table(knn.pred, test$chd)
tab
mean(test$chd == knn.pred)
sum(tab)
View(test.X)
train.X = standardizedX
train.Y = train$chd
test.X = scale(test[,-9])
knn.pred = knn(train.X, test.X, train.Y, k=9)
tab = table(knn.pred, test$chd)
tab
mean(test$chd != knn.pred)
cvMisclassification
View(test.X)
train.X = standardizedX
train.Y = train$chd
test.X = scale(test[,-9])
knn.pred = knn(train.X, test.X, train.Y, k=9)
tab = table(knn.pred, test$chd)
tab
mean(test$chd != knn.pred)
mean(test$chd != 0)
