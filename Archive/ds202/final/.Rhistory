per %>% filter(INJ_SEV==4) -> fatal
nrow(fatal)
fatal %>%
drop_na(MAKE) %>%
group_by(STATE, MAKE) %>%
summarise(Fatalities = sum(PER_NO), .groups="keep") %>%
group_by(STATE) %>%
top_n(1, Fatalities) -> dangMakeByState
states <- map_data("state")
makeCodes <- read.csv("makeCodes.csv", header=TRUE)
stateCodes <- read.csv("stateCodes.csv", header=TRUE)
stateCodes$State <- tolower(stateCodes$State)
dangMakeByState %>%
left_join(makeCodes, by=c("MAKE"="Codes")) %>%
left_join(stateCodes, by=c("STATE"="Codes")) -> dangMakeByStateClean
dangMakeByStateClean %>%
left_join(states, by=c("State"="region")) -> dangMakeByStateMap
states %>%
group_by(region) %>%
summarise(long=mean(long), lat=mean(lat), .groups="keep") %>%
left_join(dangMakeByStateClean, by=c("region"="State")) -> stateLabels
ggplot(dangMakeByStateMap, aes(x=long, y=lat, fill=Fatalities)) +
geom_polygon(aes(group=group)) +
scale_fill_distiller(palette = "YlOrRd", direction=0) +
geom_text_repel(data=stateLabels, color="black", aes(label=Make), size=3) +
ggtitle("Most Dangerous Car Makes by State with Fatalities") +
theme_map()
acc %>%
left_join(per, by="ST_CASE") %>%
distinct(ST_CASE, .keep_all = TRUE) -> accPer
accPer %>% filter(HOUR.x < 25) -> accPer
accPer %>%
group_by(DAY_WEEK, HOUR.x) %>%
summarise(Count=n(), .groups="keep") %>%
ggplot(aes(x=HOUR.x, y=Count)) +
geom_point() +
facet_wrap(facets = "DAY_WEEK") +
ggtitle("Accidents by Hour, Day")
#accPer %>%
#  ggplot(aes(x=DAY_WEEK, group=SEX, fill=HOUR.x)) +
#  geom_bar(position="stack", stat="count")
counties <- map_data("county")
glc <- readxl::read_xlsx("GLC.xlsx") %>% select(State_Code, State_Name, County_Code, County_Name)
glc$County_Code <- as.numeric(glc$County_Code)
glc$State_Code <- as.numeric(glc$State_Code)
glc$State_Name <- tolower(glc$State_Name)
glc$County_Name <- tolower(glc$County_Name)
fatal %>%
group_by(STATE, COUNTY) %>%
summarise(Fatalities = sum(PER_NO), .groups="keep") %>%
left_join(glc, by=c("COUNTY"="County_Code", "STATE"="State_Code")) %>%
distinct(STATE, COUNTY, .keep_all = TRUE) %>%
left_join(counties, by=c("State_Name"="region","County_Name"="subregion")) %>%
ggplot(aes(x=long, y=lat, group=group, fill=Fatalities)) +
geom_polygon() +
scale_fill_distiller(palette = "YlOrRd", direction=0) +
ggtitle("Fatalities by County") +
theme_map()
fatal %>%
filter(MONTH >= 6 & MONTH <=8) -> fatalSummer
unique(fatalSummer$MONTH)
fatalSummer %>%
select(ST_CASE, STATE, PER_NO) %>%
group_by(STATE) %>%
summarise(Fatalities=sum(PER_NO)) %>%
mutate(Summer_Fatalities=Fatalities) -> fatalSummerByState
fatal %>%
filter(MONTH == 12 | MONTH <= 2) -> fatalWinter
unique(fatalWinter$MONTH)
fatalWinter %>%
select(ST_CASE, STATE, PER_NO) %>%
group_by(STATE) %>%
summarise(Fatalities=sum(PER_NO))  %>%
mutate(Winter_Fatalities=Fatalities) -> fatalWinterByState
full_join(fatalSummerByState, fatalWinterByState, by="STATE") %>%
select(STATE, Summer_Fatalities, Winter_Fatalities) %>%
mutate(`Summer - Winter Fatalities`=Summer_Fatalities - Winter_Fatalities) %>%
left_join(stateCodes, by=c("STATE"="Codes")) %>%
left_join(states, by=c("State"="region")) %>%
ggplot(aes(x=long, y=lat, group=group, fill=`Summer - Winter Fatalities`)) +
geom_polygon() +
scale_fill_distiller(palette = "RdBu") +
ggtitle("Fatality Differences Between Summer and WInter") +
theme_map()
knitr::opts_chunk$set(echo = TRUE)
all <- ggplot(states, aes(x=long, y=lat)) +
geom_path(aes(group=group)) +
theme_map() +
geom_point(data=filter(markets, State != "Hawaii", State != "Alaska"), aes(x=x, y=y, text=paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size=.7, alpha=.5)
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(readxl)
library(ggthemes)
library(plotly)
states <- map_data("state")
markets <- read.csv("markets.csv", na.strings=c(""," ","-"))
head(markets)
markets %>%
separate(col=Season1Date, into=c("Season1_Start", "Season1_End"), sep=" to ", fill="right") %>%
separate(col=Season2Date, into=c("Season2_Start", "Season2_End"), sep=" to ", fill="right") %>%
separate(col=Season3Date, into=c("Season3_Start", "Season3_End"), sep=" to ", fill="right") %>%
separate(col=Season4Date, into=c("Season4_Start", "Season4_End"), sep=" to ", fill="right") -> markets
markets$Season1_Start <- mdy(markets$Season1_Start)
markets$Season1_End <- mdy(markets$Season1_End)
markets$Season2_Start <- mdy(markets$Season2_Start)
markets$Season2_End <- mdy(markets$Season2_End)
markets$Season3_Start <- mdy(markets$Season3_Start)
markets$Season3_End <- mdy(markets$Season3_End)
markets$Season4_Start <- mdy(markets$Season4_Start)
markets$Season4_End <- mdy(markets$Season4_End)
all <- ggplot(states, aes(x=long, y=lat)) +
geom_path(aes(group=group)) +
theme_map() +
geom_point(data=filter(markets, State != "Hawaii", State != "Alaska"), aes(x=x, y=y, text=paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size=.7, alpha=.5)
ggplotly(all, tooltip = c("text"))
head(states)
countByState <- markets
countyByState$State
countByState <- markets
countByState$State
countByState <- markets
countByState$State <- tolower(countByState$State)
countByState %>%
left_join(states, by = c("State"="region"))
countByState <- markets
countByState$State <- tolower(countByState$State)
countByState %>%
group_by(State) %>%
summarise(Count=n())
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count), group = group)
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(readxl)
library(ggthemes)
library(plotly)
states <- map_data("state")
markets <- read.csv("markets.csv", na.strings=c(""," ","-"))
head(markets)
markets %>%
separate(col=Season1Date, into=c("Season1_Start", "Season1_End"), sep=" to ", fill="right") %>%
separate(col=Season2Date, into=c("Season2_Start", "Season2_End"), sep=" to ", fill="right") %>%
separate(col=Season3Date, into=c("Season3_Start", "Season3_End"), sep=" to ", fill="right") %>%
separate(col=Season4Date, into=c("Season4_Start", "Season4_End"), sep=" to ", fill="right") -> markets
markets$Season1_Start <- mdy(markets$Season1_Start)
markets$Season1_End <- mdy(markets$Season1_End)
markets$Season2_Start <- mdy(markets$Season2_Start)
markets$Season2_End <- mdy(markets$Season2_End)
markets$Season3_Start <- mdy(markets$Season3_Start)
markets$Season3_End <- mdy(markets$Season3_End)
markets$Season4_Start <- mdy(markets$Season4_Start)
markets$Season4_End <- mdy(markets$Season4_End)
countByState <- markets
countByState$State <- tolower(countByState$State)
countByState %>%
group_by(State) %>%
summarise(Count = n()) %>%
left_join(states, by = c("State"="region")) -> countByState
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count), group = group)
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group))
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group))
ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group))
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) + +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5)
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
scale_fill_distiller(palette = "tans")
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
scale_fill_distiller(palette = "tans", direction = 0)
ggplotly(all, tooltip = c("text"))
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(readxl)
library(ggthemes)
library(plotly)
states <- map_data("state")
markets <- read.csv("markets.csv", na.strings=c(""," ","-"))
head(markets)
markets %>%
separate(col=Season1Date, into=c("Season1_Start", "Season1_End"), sep=" to ", fill="right") %>%
separate(col=Season2Date, into=c("Season2_Start", "Season2_End"), sep=" to ", fill="right") %>%
separate(col=Season3Date, into=c("Season3_Start", "Season3_End"), sep=" to ", fill="right") %>%
separate(col=Season4Date, into=c("Season4_Start", "Season4_End"), sep=" to ", fill="right") -> markets
markets$Season1_Start <- mdy(markets$Season1_Start)
markets$Season1_End <- mdy(markets$Season1_End)
markets$Season2_Start <- mdy(markets$Season2_Start)
markets$Season2_End <- mdy(markets$Season2_End)
markets$Season3_Start <- mdy(markets$Season3_Start)
markets$Season3_End <- mdy(markets$Season3_End)
markets$Season4_Start <- mdy(markets$Season4_Start)
markets$Season4_End <- mdy(markets$Season4_End)
countByState <- markets
countByState$State <- tolower(countByState$State)
countByState %>%
group_by(State) %>%
summarise(`Farmer's Markets` = n()) %>%
left_join(states, by = c("State"="region")) -> countByState
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = Count, group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
scale_fill_distiller(palette = "tans", direction = 0)
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
scale_fill_distiller(palette = "tans", direction = 0)
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
scale_fill_distiller(palette = "tans", direction = 0)
all <- ggplot(states, aes(x = long, y = lat)) +
geom_path(aes(group = group)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
theme_map() +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
scale_fill_distiller(palette = "tans", direction = 0)
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group))
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group)) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group)) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map()
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map()
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets")
ggplotly(all, tooltip = c("text"))
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(readxl)
library(ggthemes)
library(plotly)
library(extrafont)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(readxl)
library(ggthemes)
library(plotly)
library(extrafont)
install.packages("extraFont")
install.packages("extrafont")
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(readxl)
library(ggthemes)
library(plotly)
library(extrafont)
states <- map_data("state")
windowsFonts()
font_import()
loadfonts(device = "win")
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(readxl)
library(ggthemes)
library(plotly)
library(extrafont)
states <- map_data("state")
markets <- read.csv("markets.csv", na.strings=c(""," ","-"))
head(markets)
markets %>%
separate(col=Season1Date, into=c("Season1_Start", "Season1_End"), sep=" to ", fill="right") %>%
separate(col=Season2Date, into=c("Season2_Start", "Season2_End"), sep=" to ", fill="right") %>%
separate(col=Season3Date, into=c("Season3_Start", "Season3_End"), sep=" to ", fill="right") %>%
separate(col=Season4Date, into=c("Season4_Start", "Season4_End"), sep=" to ", fill="right") -> markets
markets$Season1_Start <- mdy(markets$Season1_Start)
markets$Season1_End <- mdy(markets$Season1_End)
markets$Season2_Start <- mdy(markets$Season2_Start)
markets$Season2_End <- mdy(markets$Season2_End)
markets$Season3_Start <- mdy(markets$Season3_Start)
markets$Season3_End <- mdy(markets$Season3_End)
markets$Season4_Start <- mdy(markets$Season4_Start)
markets$Season4_End <- mdy(markets$Season4_End)
countByState <- markets
countByState$State <- tolower(countByState$State)
countByState %>%
group_by(State) %>%
summarise(`Farmer's Markets` = n()) %>%
left_join(states, by = c("State"="region")) -> countByState
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets", subtitle = "Location and density of Farmer's Markets in each state") +
theme()
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme()
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme()
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme(text = element_text(size = 24, family = "Comic Sans MS"))
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme(text = element_text(size = 18, family = "Comic Sans MS"))
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme(plot.title = element_text(size = 18, family = "Comic Sans MS"))
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme(plot.title = element_text(size = 18, family = "Comic Sans MS"), legend.title = element_text("Market Count"))
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0) +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme(plot.title = element_text(size = 18, family = "Comic Sans MS"), legend.title = "Market Count")
ggplotly(all, tooltip = c("text"))
all <- ggplot(states, aes(x = long, y = lat)) +
geom_polygon(data = countByState, aes(x = long, y = lat, fill = `Farmer's Markets`, group = group)) +
geom_point(data = filter(markets, State != "Hawaii", State != "Alaska"), aes(x = x, y = y, text = paste("State: ", State, "\nCity: ", city, "\nName: ", MarketName)), size = .7, alpha = .5) +
geom_path(aes(group = group), size = .05) +
scale_fill_distiller(palette = "tans", direction = 0, name = "Market Count") +
theme_map() +
ggtitle("Nationally Registered Farmer's Markets") +
theme(plot.title = element_text(size = 18, family = "Comic Sans MS"))
ggplotly(all, tooltip = c("text"))
install.packages("leaflet")
install.packages("shinydashboard")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(shinydashboard)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar().
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) {}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
install.packages("RSQLite")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
library(RSQLite)
tables <- dbConnect(drv = RSQLite::SQLite(), dbname = "FPA_FOD.sqlite") %>% dbListTables()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
tables <- dbConnect(drv = RSQLite::SQLite(), dbname = "FPA_FOD.sqlite") %>% dbListTables()
tables <- tables[tables != "sqlite_sequence"]
lDataFrames <- vector("list", length=length(tables))
for (i in seq(along=tables)) {
lDataFrames[[i]] <- dbGetQuery(conn=con, statement=paste("SELECT * FROM '", tables[[i]], "'", sep=""))
}
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
con <- dbConnect(drv = RSQLite::SQLite(), dbname = "FPA_FOD.sqlite")
tables <- dbListTables(con)
tables <- tables[tables != "sqlite_sequence"]
lDataFrames <- vector("list", length=length(tables))
for (i in seq(along=tables)) {
lDataFrames[[i]] <- dbGetQuery(conn=con, statement=paste("SELECT * FROM '", tables[[i]], "'", sep=""))
}
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
con <- dbConnect(drv = RSQLite::SQLite(), dbname = "FPA_FOD.sqlite")
dbListTables(con)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
fires <- dbReadTable(con, "Fires")
summary(fires)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
con <- dbConnect(drv = RSQLite::SQLite(), dbname = "FPA_FOD.sqlite")
dbListTables(con)
fires <- dbReadTable(con, "Fires")
summary(fires)
library(tidyverse)
library(dplyr)
